<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Leo学习日志</title>
    <link>/</link>
    <description>Recent content on Leo学习日志</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <lastBuildDate>Sat, 02 Mar 2019 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>About</title>
      <link>/about/</link>
      <pubDate>Sat, 02 Mar 2019 00:00:00 +0000</pubDate>
      
      <guid>/about/</guid>
      <description>一枚普通的程序猿，现在是Gopher，专注于分布式架构，研发。</description>
    </item>
    
    <item>
      <title>2018年总结</title>
      <link>/blog/2018-review/</link>
      <pubDate>Thu, 28 Feb 2019 22:22:26 +0800</pubDate>
      
      <guid>/blog/2018-review/</guid>
      <description>先废话一下。
很久没有写文章了，印象中就是从高中毕业之后，一直都没有写东西。哦，大学的时候写过英文作文，算是写了一点吧。总想着说写博客，但是懒，因为要写好一篇博客，特别是技术博客，必须是自己融会贯通了才行，否则写出来就是误人子弟，加上很久没写文章，一直不知道如何下笔，就这样拖着、懒着，一直到2019年才想着写一篇2018年总结，作为自己博客的开端。
到了2019年，马上就要进入而立之年，焦虑感越来越深。这种焦虑感不止是高额的房贷，还是自己事业上的止步不前，特别是看到共事的同事们越来越年轻，他们有更多的时间、更多的精力投入在工作中，而我除了工作，还必须兼顾家庭，两者之前的平衡，永远是一个难题。所以唯一的出路，就是自己处事的方式更加“成熟”，更高质量的完成工作，才能弥补工作时长的短板。
废话有点多，原谅自己很久没写东西，有种想说的欲望。想想2018年，算是自己，或者说家庭变化比较大的一年。为什么这么讲？我想从自己工作上和家庭上两个方面来说下。
1. 工作 去年8月末跳槽了，这次跳槽算是有点戏剧性，本身自己是抱着试一试的态度去的，没想到最后成了。说实话当时在老东家除了加班比较严重外，其实挺不错，而且上司对我也很好。不过因为当时自己做的事情比较杂，而这次的机会是去全职做服务端开发，且是公司的核心业务，用户量很大，是我一直期望的工作，就屁颠屁颠的去了。
到现在已经在新项目组里工作半年，业务上也算基本上手，不过整个系统的复杂程度比我想象中复杂的多。用的是Golang做开发，对于Golang，也只是在前公司最后几个月稍微玩了下，实战经验缺乏，到现在也只是能用而已，一些高级特性什么，没有一个系统的学习，所以熟练还算不上。这也是我2019年需要努力提高的地方，毕竟是吃饭的基础。 在进项目组之前就听说组内大牛比较多，都是好几年工作经验，不乏从腾讯、YY过来的大神，瞬间压力更大了。不管是从技术还是经验来说，2019年都是要大力提高的点。是压力，也是动力。
整体来看，工作上的变动自己还挺满意的。
2. 家庭 2018年小孩一岁了，自己会走，也有自己的小脾气了，所以每天除了工作，还需要分配时间来陪她。还好有爸妈在，带小孩的事情不需要太过于操心，只是爸妈的有些理念，或者说育儿方式比较落后，难免有冲突。不过还好，爸妈不是网络上流传的那种蛮不讲理的人，跟他们阐明道理，大家还是能达成共识的。所以今年其实花在家庭上的时间占比多了不少，一岁多的小家伙是家里的开心果，总是忍不住想她。
不过去年没怎么带爸妈和小孩出去玩，一起出去的次数一只手都可以数的过来：去了家旁边的沙滩，去了佛山吃早茶，还在十一开车一起回了趟老家，想来也就这几次了。 十一那次开车回去算是我第一次开长途，那天开了12个小时，我和老婆换着开，那是真累。不过我还是挺兴奋的，毕竟是“第一次”，那时候为了躲避高速拥堵，跟着百度导航走了国道、省道，还走了县道。哈哈哈，现在想起来，也是一次难忘的旅程。
家里的变化主要是个人时间上占比多了，并且也需要考虑小孩的教育问题。而且老婆去年换了两次工作，最后也不太理想，经济压力也变大不少，整体来说，一般一般吧。不过我的期望不高，只希望全家人身体健健康康就好。
3. 学习 平时没有总结以及计划的习惯，所以2018年基本上没什么具体计划。当时只想着在工作上弥补自己基础薄弱的短板，所以更多都是从工作实践，自我反思来提高。这里有点不好的就是，没有养成写博客的习惯，今年一定要改，否则文章都不会写了，以后还怎么辅导小孩功课。
自身提高部分主要是以下几点：
 网络知识理解更透彻了，主要是2017年走了基本上一年的下载器，跟网络打交道的多； 学会了Golang； 刷了几题LeetCode，对算法有了一丁点基础； 没了  学习还是缺乏系统，有很多东西其实自己明白，但是不会说，连不起来。所以这是自己焦虑感越来越大的原因之一。
4. 计划 也就说这么多。在这里也定一个2019年计划，期望不会在明年打脸：
 写12篇技术相关博客，至少1个月一篇； 看10本技术书籍，5本非技术书。对于非技术书籍需要写读后感； 坚持健身，一定要把肚腩减掉； 看2-3本育儿书籍，要科学育儿。  希望在学习上更加系统些。
加油，共勉！</description>
    </item>
    
    <item>
      <title>DLL的二进制兼容</title>
      <link>/blog/binary-compatibility-cpp/</link>
      <pubDate>Fri, 08 Jun 2018 10:44:47 +0800</pubDate>
      
      <guid>/blog/binary-compatibility-cpp/</guid>
      <description>详解 什么是二进制兼容？ 所谓二进制兼容就是在做版本升级（也可能是Bug fix）库文件的时候，不必要重新编译使用这个库的可执行文件或使用这个库的其他库文件，同时能保证程序功能不被破坏。
当然，这只是一个现象级描述，其实在一些简单的例子里，假设我们导出一个C++类，在调用时，第三方仍然不需要重新编译可以运行。如下面例子：
 FastString.dll - FastString.h文件  //导出类 class __declspec(dllexport) FastString { public: FastString(); ~FastString(); size_t length() { return 0; } private: unsigned char *m_bytes; }  test.exe - main.cpp文件  int main() { FastString fStr; size_t len = fStr.length(); printf(&amp;#34;fast string length %d\n&amp;#34;, len); _getch(); return 0; } 如果我们给导出类加上一个虚函数
virtual boole isEmpty(); // 位于 length 方法之前 重新编译FastString.dll，然后直接运行test.exe，发现仍然能打印出fast string length 0，并且没有运行错误。
所以按照上面所说，FastString.dll是二进制兼容的。然而不是的！因为它增加了一个虚函数，导致FastString实例增加了一个虚函数表（是一个void **指针），那为什么运行的时候没有错误呢？参考这个问题：SO- why new virtual function will not break binary compatibility per phenomenon?</description>
    </item>
    
    <item>
      <title>Home</title>
      <link>/home/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/home/</guid>
      <description>欢迎~_~</description>
    </item>
    
    <item>
      <title>License</title>
      <link>/license/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/license/</guid>
      <description>本博客文章采用以下授权:
 The MIT License (MIT)
Copyright (c) 2019 Leo Liuliuxin19900213@gmail.com
Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the &amp;ldquo;Software&amp;rdquo;), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:</description>
    </item>
    
    <item>
      <title>归档</title>
      <link>/archive/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/archive/</guid>
      <description></description>
    </item>
    
  </channel>
</rss>
<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Blog on Leo学习日志</title>
    <link>http://poacherbro.github.com/blog/</link>
    <description>Recent content in Blog on Leo学习日志</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-CN</language>
    <lastBuildDate>Fri, 08 Jun 2018 10:44:47 +0800</lastBuildDate>
    
	<atom:link href="http://poacherbro.github.com/blog/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>DLL的二进制兼容</title>
      <link>http://poacherbro.github.com/blog/dll%E7%9A%84%E4%BA%8C%E8%BF%9B%E5%88%B6%E5%85%BC%E5%AE%B9/</link>
      <pubDate>Fri, 08 Jun 2018 10:44:47 +0800</pubDate>
      
      <guid>http://poacherbro.github.com/blog/dll%E7%9A%84%E4%BA%8C%E8%BF%9B%E5%88%B6%E5%85%BC%E5%AE%B9/</guid>
      <description>详解 什么是二进制兼容？ 所谓二进制兼容就是在做版本升级（也可能是Bug fix）库文件的时候，不必要重新编译使用这个库的可执行文件或使用这个库的其他库文件，同时能保证程序功能不被破坏。
当然，这只是一个现象级描述，其实在一些简单的例子里，假设我们导出一个C++类，在调用时，第三方仍然不需要重新编译可以运行。如下面例子：
 FastString.dll - FastString.h文件
  //导出类 class __declspec(dllexport) FastString { public: FastString(); ~FastString(); size_t length() { return 0; } private: unsigned char *m_bytes; }   test.exe - main.cpp文件
  int main() { FastString fStr; size_t len = fStr.length(); printf(&amp;quot;fast string length %d\n&amp;quot;, len); _getch(); return 0; }  如果我们给导出类加上一个虚函数
virtual boole isEmpty(); // 位于 length 方法之前  重新编译FastString.dll，然后直接运行test.exe，发现仍然能打印出fast string length 0，并且没有运行错误。</description>
    </item>
    
  </channel>
</rss>